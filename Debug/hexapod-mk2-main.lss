
hexapod-mk2-main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000005f  00800060  00800060  000001ca  2**0
                  ALLOC
  2 .stab         00001b54  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000019a4  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2a c0       	rjmp	.+84     	; 0x56 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c0       	rjmp	.+154    	; 0xe8 <__vector_19>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_start>:
  54:	4a 00       	.word	0x004a	; ????

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d4 e0       	ldi	r29, 0x04	; 4
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_clear_bss>:
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	af 3b       	cpi	r26, 0xBF	; 191
  6e:	b1 07       	cpc	r27, r17
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>

00000072 <__do_global_ctors>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	c6 e5       	ldi	r28, 0x56	; 86
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	03 c0       	rjmp	.+6      	; 0x80 <__do_global_ctors+0xe>
  7a:	22 97       	sbiw	r28, 0x02	; 2
  7c:	fe 01       	movw	r30, r28
  7e:	65 d0       	rcall	.+202    	; 0x14a <__tablejump__>
  80:	c4 35       	cpi	r28, 0x54	; 84
  82:	d1 07       	cpc	r29, r17
  84:	d1 f7       	brne	.-12     	; 0x7a <__do_global_ctors+0x8>
  86:	29 d0       	rcall	.+82     	; 0xda <main>
  88:	64 c0       	rjmp	.+200    	; 0x152 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <_ZN7ESClassC1Ev>:

ESClass ES;

ESClass::ESClass()
{
	asm volatile("nop");
  8c:	00 00       	nop
}
  8e:	08 95       	ret

00000090 <_ZN7ESClass10initializeEv>:

void ESClass::initialize()
{
	asm volatile("nop");
  90:	00 00       	nop
}
  92:	08 95       	ret

00000094 <_GLOBAL__I_ES>:
#include "es.h"

ESClass ES;
  94:	80 e6       	ldi	r24, 0x60	; 96
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	f9 cf       	rjmp	.-14     	; 0x8c <_ZN7ESClassC1Ev>

0000009a <_ZN8LegClass6attachEv>:
#include "Leg.h"

void LegClass::attach()
{
	asm volatile("nop");
  9a:	00 00       	nop
}
  9c:	08 95       	ret

0000009e <es_trigger>:
	}
}

void es_trigger(uint8_t code)
{
	if (code < ES_HANDLERS_MAX && es_count < ES_EVENTS_MAX) {
  9e:	8e 31       	cpi	r24, 0x1E	; 30
  a0:	d8 f4       	brcc	.+54     	; 0xd8 <es_trigger+0x3a>
  a2:	90 91 62 00 	lds	r25, 0x0062
  a6:	9e 31       	cpi	r25, 0x1E	; 30
  a8:	b8 f4       	brcc	.+46     	; 0xd8 <es_trigger+0x3a>
		es_events[es_tail] = code;
  aa:	90 91 be 00 	lds	r25, 0x00BE
  ae:	e3 e6       	ldi	r30, 0x63	; 99
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	e9 0f       	add	r30, r25
  b4:	f1 1d       	adc	r31, r1
  b6:	80 83       	st	Z, r24
		es_tail++;
  b8:	80 91 be 00 	lds	r24, 0x00BE
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 be 00 	sts	0x00BE, r24

		if (es_tail == ES_EVENTS_MAX) {
  c2:	80 91 be 00 	lds	r24, 0x00BE
  c6:	8e 31       	cpi	r24, 0x1E	; 30
  c8:	11 f4       	brne	.+4      	; 0xce <es_trigger+0x30>
			es_tail = 0;
  ca:	10 92 be 00 	sts	0x00BE, r1
		}

		es_count++;
  ce:	80 91 62 00 	lds	r24, 0x0062
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 62 00 	sts	0x0062, r24
  d8:	08 95       	ret

000000da <main>:

#include "Leg.h"

int main(void)
{
	ES.initialize();
  da:	80 e6       	ldi	r24, 0x60	; 96
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	d8 df       	rcall	.-80     	; 0x90 <_ZN7ESClass10initializeEv>
  e0:	dc df       	rcall	.-72     	; 0x9a <_ZN8LegClass6attachEv>
	LegClass::attach();
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
	//initialize_es();
	//initialize_timer0();
	//TODO initialize es, frame, TWI, remote control
}
  e6:	08 95       	ret

000000e8 <__vector_19>:
	// Clear compare match interrupt flag
	TIFR  |= _BV(OCF0);
}

ISR(TIMER0_COMP_vect)
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	6f 93       	push	r22
  fc:	7f 93       	push	r23
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
    timer0++;
 10a:	80 91 61 00 	lds	r24, 0x0061
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 61 00 	sts	0x0061, r24
#if F_CPU == 4000000UL
    // Check sub-counter value == 100 (2000 / 200 == 10Hz)
    if (timer0 >= 200) {
#else
    // Check sub-counter value == 100 (1000 / 100 == 10Hz)
    if (timer0 >= 100) {
 114:	80 91 61 00 	lds	r24, 0x0061
 118:	84 36       	cpi	r24, 0x64	; 100
 11a:	20 f0       	brcs	.+8      	; 0x124 <__vector_19+0x3c>
#endif
        es_trigger(ES_EVENT_TIMER0_COMP);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	bf df       	rcall	.-130    	; 0x9e <es_trigger>
 120:	10 92 61 00 	sts	0x0061, r1
        timer0 = 0;
 124:	ff 91       	pop	r31
    }
}
 126:	ef 91       	pop	r30
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	7f 91       	pop	r23
 132:	6f 91       	pop	r22
 134:	5f 91       	pop	r21
 136:	4f 91       	pop	r20
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__tablejump2__>:
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31

0000014a <__tablejump__>:
 14a:	05 90       	lpm	r0, Z+
 14c:	f4 91       	lpm	r31, Z+
 14e:	e0 2d       	mov	r30, r0
 150:	09 94       	ijmp

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
