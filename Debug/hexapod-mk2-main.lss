
hexapod-mk2-main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000398  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000070  00800060  00800060  0000040c  2**0
                  ALLOC
  2 .stab         00001788  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000108d  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 3d       	cpi	r26, 0xD0	; 208
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
  74:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initialize_es>:
volatile uint8_t es_count;
volatile uint8_t es_events[ES_EVENTS_MAX];
volatile es_handler_t es_handlers[ES_HANDLERS_MAX];

void initialize_es(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	es_head  = 0;
  84:	10 92 80 00 	sts	0x0080, r1
	es_tail  = 0;
  88:	10 92 bd 00 	sts	0x00BD, r1
	es_count = 0;
  8c:	10 92 61 00 	sts	0x0061, r1
}
  90:	cf 91       	pop	r28
  92:	df 91       	pop	r29
  94:	08 95       	ret

00000096 <es_attach>:

void es_attach(uint8_t code, void (*handler_ptr) (void))
{
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	00 d0       	rcall	.+0      	; 0x9c <es_attach+0x6>
  9c:	0f 92       	push	r0
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	89 83       	std	Y+1, r24	; 0x01
  a4:	7b 83       	std	Y+3, r23	; 0x03
  a6:	6a 83       	std	Y+2, r22	; 0x02
	if (code < ES_HANDLERS_MAX) {
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	8e 31       	cpi	r24, 0x1E	; 30
  ac:	60 f4       	brcc	.+24     	; 0xc6 <es_attach+0x30>
		es_handlers[code] = handler_ptr;
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	88 2f       	mov	r24, r24
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	8f 57       	subi	r24, 0x7F	; 127
  ba:	9f 4f       	sbci	r25, 0xFF	; 255
  bc:	2a 81       	ldd	r18, Y+2	; 0x02
  be:	3b 81       	ldd	r19, Y+3	; 0x03
  c0:	fc 01       	movw	r30, r24
  c2:	31 83       	std	Z+1, r19	; 0x01
  c4:	20 83       	st	Z, r18
	}
}
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	08 95       	ret

000000d2 <es_detach>:

void es_detach(uint8_t code)
{
  d2:	df 93       	push	r29
  d4:	cf 93       	push	r28
  d6:	0f 92       	push	r0
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	89 83       	std	Y+1, r24	; 0x01
	if (code < ES_HANDLERS_MAX) {
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	8e 31       	cpi	r24, 0x1E	; 30
  e2:	50 f4       	brcc	.+20     	; 0xf8 <es_detach+0x26>
		es_handlers[code] = 0;
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	88 2f       	mov	r24, r24
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	8f 57       	subi	r24, 0x7F	; 127
  f0:	9f 4f       	sbci	r25, 0xFF	; 255
  f2:	fc 01       	movw	r30, r24
  f4:	11 82       	std	Z+1, r1	; 0x01
  f6:	10 82       	st	Z, r1
	}
}
  f8:	0f 90       	pop	r0
  fa:	cf 91       	pop	r28
  fc:	df 91       	pop	r29
  fe:	08 95       	ret

00000100 <es_trigger>:

void es_trigger(uint8_t code)
{
 100:	df 93       	push	r29
 102:	cf 93       	push	r28
 104:	0f 92       	push	r0
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	89 83       	std	Y+1, r24	; 0x01
	if (code < ES_HANDLERS_MAX && es_count < ES_EVENTS_MAX) {
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	8e 31       	cpi	r24, 0x1E	; 30
 110:	e8 f4       	brcc	.+58     	; 0x14c <es_trigger+0x4c>
 112:	80 91 61 00 	lds	r24, 0x0061
 116:	8e 31       	cpi	r24, 0x1E	; 30
 118:	c8 f4       	brcc	.+50     	; 0x14c <es_trigger+0x4c>
		es_events[es_tail] = code;
 11a:	80 91 bd 00 	lds	r24, 0x00BD
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	8e 59       	subi	r24, 0x9E	; 158
 124:	9f 4f       	sbci	r25, 0xFF	; 255
 126:	29 81       	ldd	r18, Y+1	; 0x01
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
		es_tail++;
 12c:	80 91 bd 00 	lds	r24, 0x00BD
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 bd 00 	sts	0x00BD, r24

		if (es_tail == ES_EVENTS_MAX) {
 136:	80 91 bd 00 	lds	r24, 0x00BD
 13a:	8e 31       	cpi	r24, 0x1E	; 30
 13c:	11 f4       	brne	.+4      	; 0x142 <es_trigger+0x42>
			es_tail = 0;
 13e:	10 92 bd 00 	sts	0x00BD, r1
		}

		es_count++;
 142:	80 91 61 00 	lds	r24, 0x0061
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 61 00 	sts	0x0061, r24
	}
}
 14c:	0f 90       	pop	r0
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	08 95       	ret

00000154 <es_dispatch>:

void es_dispatch(void)
{
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	0f 92       	push	r0
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
	if (es_count > 0) {
 15e:	80 91 61 00 	lds	r24, 0x0061
 162:	88 23       	and	r24, r24
 164:	89 f1       	breq	.+98     	; 0x1c8 <es_dispatch+0x74>
		uint8_t code = es_events[es_head];
 166:	80 91 80 00 	lds	r24, 0x0080
 16a:	88 2f       	mov	r24, r24
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	8e 59       	subi	r24, 0x9E	; 158
 170:	9f 4f       	sbci	r25, 0xFF	; 255
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z
 176:	89 83       	std	Y+1, r24	; 0x01

		es_count--;
 178:	80 91 61 00 	lds	r24, 0x0061
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	80 93 61 00 	sts	0x0061, r24
		es_head++;
 182:	80 91 80 00 	lds	r24, 0x0080
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	80 93 80 00 	sts	0x0080, r24

		if (es_head == ES_EVENTS_MAX) {
 18c:	80 91 80 00 	lds	r24, 0x0080
 190:	8e 31       	cpi	r24, 0x1E	; 30
 192:	11 f4       	brne	.+4      	; 0x198 <es_dispatch+0x44>
			es_head = 0;
 194:	10 92 80 00 	sts	0x0080, r1
		}

		if (es_handlers[code]) {
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	88 2f       	mov	r24, r24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	8f 57       	subi	r24, 0x7F	; 127
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	fc 01       	movw	r30, r24
 1a8:	80 81       	ld	r24, Z
 1aa:	91 81       	ldd	r25, Z+1	; 0x01
 1ac:	00 97       	sbiw	r24, 0x00	; 0
 1ae:	61 f0       	breq	.+24     	; 0x1c8 <es_dispatch+0x74>
			es_handlers[code]();
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	88 2f       	mov	r24, r24
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	8f 57       	subi	r24, 0x7F	; 127
 1bc:	9f 4f       	sbci	r25, 0xFF	; 255
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	91 81       	ldd	r25, Z+1	; 0x01
 1c4:	fc 01       	movw	r30, r24
 1c6:	09 95       	icall
		}
	}
}
 1c8:	0f 90       	pop	r0
 1ca:	cf 91       	pop	r28
 1cc:	df 91       	pop	r29
 1ce:	08 95       	ret

000001d0 <servomotor_attach>:

volatile leg_t legs[6];

//TODO remove after
uint8_t servomotor_attach(volatile uint8_t *port, uint8_t pin, uint16_t angle, uint8_t reverse)
{
 1d0:	df 93       	push	r29
 1d2:	cf 93       	push	r28
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <servomotor_attach+0x6>
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <servomotor_attach+0x8>
 1d8:	00 d0       	rcall	.+0      	; 0x1da <servomotor_attach+0xa>
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	9a 83       	std	Y+2, r25	; 0x02
 1e0:	89 83       	std	Y+1, r24	; 0x01
 1e2:	6b 83       	std	Y+3, r22	; 0x03
 1e4:	5d 83       	std	Y+5, r21	; 0x05
 1e6:	4c 83       	std	Y+4, r20	; 0x04
 1e8:	2e 83       	std	Y+6, r18	; 0x06
	return 0;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
}
 1ec:	26 96       	adiw	r28, 0x06	; 6
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	cf 91       	pop	r28
 1fa:	df 91       	pop	r29
 1fc:	08 95       	ret

000001fe <initialize_hp>:

void initialize_hp(void)
{
 1fe:	df 93       	push	r29
 200:	cf 93       	push	r28
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62

	//legs[HP_LEG_MIDDLE_LEFT].c = servomotor_attach(&PORTF, PF2, 220, 1);//220
	//legs[HP_LEG_MIDDLE_LEFT].f = servomotor_attach(&PORTF, PF1, -190, 1);//-190
	//legs[HP_LEG_MIDDLE_LEFT].t = servomotor_attach(&PORTF, PF0, -170, 0);//-170

	legs[HP_LEG_MIDDLE_RIGHT].c = servomotor_attach(&PORTA, PA7, -10, 0);//-10
 206:	8b e3       	ldi	r24, 0x3B	; 59
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	67 e0       	ldi	r22, 0x07	; 7
 20c:	46 ef       	ldi	r20, 0xF6	; 246
 20e:	5f ef       	ldi	r21, 0xFF	; 255
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <servomotor_attach>
 216:	80 93 c7 00 	sts	0x00C7, r24
	legs[HP_LEG_MIDDLE_RIGHT].f = servomotor_attach(&PORTA, PA6, -70, 0);//-70
 21a:	8b e3       	ldi	r24, 0x3B	; 59
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	66 e0       	ldi	r22, 0x06	; 6
 220:	4a eb       	ldi	r20, 0xBA	; 186
 222:	5f ef       	ldi	r21, 0xFF	; 255
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <servomotor_attach>
 22a:	80 93 c8 00 	sts	0x00C8, r24
	legs[HP_LEG_MIDDLE_RIGHT].t = servomotor_attach(&PORTA, PA5, 120, 1);//120
 22e:	8b e3       	ldi	r24, 0x3B	; 59
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	65 e0       	ldi	r22, 0x05	; 5
 234:	48 e7       	ldi	r20, 0x78	; 120
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <servomotor_attach>
 23e:	80 93 c9 00 	sts	0x00C9, r24

	legs[HP_LEG_BACK_LEFT].c = servomotor_attach(&PORTA, PA4, -130, 0);//-130
 242:	8b e3       	ldi	r24, 0x3B	; 59
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	64 e0       	ldi	r22, 0x04	; 4
 248:	4e e7       	ldi	r20, 0x7E	; 126
 24a:	5f ef       	ldi	r21, 0xFF	; 255
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <servomotor_attach>
 252:	80 93 ca 00 	sts	0x00CA, r24
	legs[HP_LEG_BACK_LEFT].f = servomotor_attach(&PORTA, PA3, -140, 0);//-140
 256:	8b e3       	ldi	r24, 0x3B	; 59
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	63 e0       	ldi	r22, 0x03	; 3
 25c:	44 e7       	ldi	r20, 0x74	; 116
 25e:	5f ef       	ldi	r21, 0xFF	; 255
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <servomotor_attach>
 266:	80 93 cb 00 	sts	0x00CB, r24
	legs[HP_LEG_BACK_LEFT].t = servomotor_attach(&PORTA, PA2, -50, 1);//-50
 26a:	8b e3       	ldi	r24, 0x3B	; 59
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	4e ec       	ldi	r20, 0xCE	; 206
 272:	5f ef       	ldi	r21, 0xFF	; 255
 274:	21 e0       	ldi	r18, 0x01	; 1
 276:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <servomotor_attach>
 27a:	80 93 cc 00 	sts	0x00CC, r24

	legs[HP_LEG_BACK_RIGHT].c = servomotor_attach(&PORTB, PB4, -110, 0);//-110
 27e:	88 e3       	ldi	r24, 0x38	; 56
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	64 e0       	ldi	r22, 0x04	; 4
 284:	42 e9       	ldi	r20, 0x92	; 146
 286:	5f ef       	ldi	r21, 0xFF	; 255
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <servomotor_attach>
 28e:	80 93 cd 00 	sts	0x00CD, r24
	legs[HP_LEG_BACK_RIGHT].f = servomotor_attach(&PORTB, PB5, -210, 0);//-210
 292:	88 e3       	ldi	r24, 0x38	; 56
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	65 e0       	ldi	r22, 0x05	; 5
 298:	4e e2       	ldi	r20, 0x2E	; 46
 29a:	5f ef       	ldi	r21, 0xFF	; 255
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <servomotor_attach>
 2a2:	80 93 ce 00 	sts	0x00CE, r24
	legs[HP_LEG_BACK_RIGHT].t = servomotor_attach(&PORTB, PB6, -40, 1);//-40
 2a6:	88 e3       	ldi	r24, 0x38	; 56
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	66 e0       	ldi	r22, 0x06	; 6
 2ac:	48 ed       	ldi	r20, 0xD8	; 216
 2ae:	5f ef       	ldi	r21, 0xFF	; 255
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <servomotor_attach>
 2b6:	80 93 cf 00 	sts	0x00CF, r24

}
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	08 95       	ret

000002c0 <main>:
#include "es.h"
#include "timer0.h"

int main(void)
{
 2c0:	df 93       	push	r29
 2c2:	cf 93       	push	r28
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
	initialize_es();
 2c8:	0e 94 3e 00 	call	0x7c	; 0x7c <initialize_es>
	initialize_timer0();
 2cc:	0e 94 6d 01 	call	0x2da	; 0x2da <initialize_timer0>
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
	//TODO initialize es, frame, TWI, remote control
}
 2d4:	cf 91       	pop	r28
 2d6:	df 91       	pop	r29
 2d8:	08 95       	ret

000002da <initialize_timer0>:
#include "es.h"

volatile uint8_t timer0 = 0;

void initialize_timer0(void)
{
 2da:	df 93       	push	r29
 2dc:	cf 93       	push	r28
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
#if F_CPU == 16000000UL
	// Set CTC mode and CLK/1024 (16000000 / 64 == 250000 Hz)
	TCCR0 = _BV(WGM01)|_BV(CS02)|_BV(CS00);
#elif F_CPU == 8000000UL
	// Set CTC mode and CLK/1024 (8000000 / 64 == 125000 Hz)
	TCCR0 = _BV(WGM01)|_BV(CS02)|_BV(CS00);
 2e2:	83 e5       	ldi	r24, 0x53	; 83
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	2d e0       	ldi	r18, 0x0D	; 13
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 83       	st	Z, r18
#else
	#error "F_CPU not supported, allow only 16MHz, 8MHz, 4MHz"
#endif

	// Reset timer
	TCNT0 = 0;
 2ec:	82 e5       	ldi	r24, 0x52	; 82
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	fc 01       	movw	r30, r24
 2f2:	10 82       	st	Z, r1
#if F_CPU == 16000000UL
	// Set compare value to reset at 250 (250000 / 250 == 1000 Hz)
	OCR0 = 250;
#elif F_CPU == 8000000UL
	// Set compare value to reset at 125 (125000 / 125 == 1000 Hz)
	OCR0 = 125;
 2f4:	8c e5       	ldi	r24, 0x5C	; 92
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	2d e7       	ldi	r18, 0x7D	; 125
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
	// Set compare value to reset at 125 (500000 / 250 == 2000 Hz)
	OCR0 = 250;
#endif

	// Enable interrupt by compare match
	TIMSK |= _BV(OCIE0);
 2fe:	89 e5       	ldi	r24, 0x59	; 89
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	29 e5       	ldi	r18, 0x59	; 89
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	f9 01       	movw	r30, r18
 308:	20 81       	ld	r18, Z
 30a:	22 60       	ori	r18, 0x02	; 2
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18

	// Clear compare match interrupt flag
	TIFR  |= _BV(OCF0);
 310:	88 e5       	ldi	r24, 0x58	; 88
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	28 e5       	ldi	r18, 0x58	; 88
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	f9 01       	movw	r30, r18
 31a:	20 81       	ld	r18, Z
 31c:	22 60       	ori	r18, 0x02	; 2
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18
}
 322:	cf 91       	pop	r28
 324:	df 91       	pop	r29
 326:	08 95       	ret

00000328 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	2f 93       	push	r18
 334:	3f 93       	push	r19
 336:	4f 93       	push	r20
 338:	5f 93       	push	r21
 33a:	6f 93       	push	r22
 33c:	7f 93       	push	r23
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
 34a:	df 93       	push	r29
 34c:	cf 93       	push	r28
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
    timer0++;
 352:	80 91 60 00 	lds	r24, 0x0060
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	80 93 60 00 	sts	0x0060, r24
#if F_CPU == 4000000UL
    // Check sub-counter value == 100 (2000 / 200 == 10Hz)
    if (timer0 >= 200) {
#else
    // Check sub-counter value == 100 (1000 / 100 == 10Hz)
    if (timer0 >= 100) {
 35c:	80 91 60 00 	lds	r24, 0x0060
 360:	84 36       	cpi	r24, 0x64	; 100
 362:	28 f0       	brcs	.+10     	; 0x36e <__vector_10+0x46>
#endif
        es_trigger(ES_EVENT_TIMER0_COMP);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 80 00 	call	0x100	; 0x100 <es_trigger>
        timer0 = 0;
 36a:	10 92 60 00 	sts	0x0060, r1
    }
}
 36e:	cf 91       	pop	r28
 370:	df 91       	pop	r29
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
